$(function(){$(".dropdown-toggle").click(function(){$(this).next(".dropdown").toggle()}),$(document).click(function(t){var e=t.target;$(e).is(".dropdown-toggle")||$(e).parents().is(".dropdown-toggle")||$(".dropdown").hide()})});var taskProjectApp=angular.module("taskProjectApp",["ngCookies","angular.filter","infinite-scroll"]);taskProjectApp.controller("TaskProjectCtrl",["$scope","$http","$cookies","$filter",function(t,e,s,o){t.taskPageCount=0,t.page=1,t.busy=!1,t.showBlockProjects=!1,t.showBlockTask=!1,t.showBlockEditProjects=!1,t.showBlockTask=!1,t.isProjectEdit=!1,t.isTaskEdit=!1,t.currentDate=new Date,t.currentTimeZone=(new Date).toString().split("(")[1].slice(0,-1);var a,i=s.get("session");t.activeClass=function(e){return e===t.activeProject?"active":""},getSession=function(){e({method:"POST",url:"https://api-test-task.decodeapps.io/signup"}).then(function(t){return s.put("session",t.data.session),i=t.data.session,checkSession(),t.data.session},function(t){})},checkSession=function(){e({method:"GET",url:"https://api-test-task.decodeapps.io/session?session="+i}).then(function(e){if("OK"==e.statusText)t.preloader={display:"block"},getUser(i),getProjects(i,!1);else{var s=getSession();getUser(s),getProjects(i,!1)}},function(t){})},t.init=function(){var t=s.get("session");void 0==t?getSession():checkSession()},getUser=function(s){e({method:"GET",url:"https://api-test-task.decodeapps.io/account?session="+s}).then(function(e){t.userAvatar=e.data.Account.image_url,t.name=e.data.Account.username},function(t){})},getProjects=function(s,o){e({method:"GET",url:"https://api-test-task.decodeapps.io/projects?session="+s}).then(function(e){t.projects=e.data.projects,o||(t.activeProject=e.data.projects[0].Project.id,t.projectTitle=e.data.projects[0].Project.title),getTasks(s,t.activeProject,10,0,null)},function(t){})},createProject=function(s,o){e({method:"POST",url:"https://api-test-task.decodeapps.io/projects/project",data:{session:s,Project:{title:o}}}).then(function(e){(e.status=200)&&(getProjects(s,!0),t.closeProjectPage(),t.activeProject=e.data.Project.id,t.projectTitle=o,t.closeEditProjectPage())},function(t){})},editProject=function(s,o,i){e({method:"POST",url:"https://api-test-task.decodeapps.io/projects/project",data:{session:s,Project:{id:o,title:i}}}).then(function(e){(e.statusText="OK")&&(getProjects(s,!0),t.activeProject=e.data.Project.id,a=e.data.Project.title,t.closeEditProjectPage(),getProjects(s,!0),t.closeEditProjectPage(),t.activeProject=e.data.Project.id,t.activeProjectName=e.data.Project.title)},function(t){})},deleteThisProject=function(t,s){e({method:"DELETE",url:"https://api-test-task.decodeapps.io/projects/project?session="+t+"&project_id="+s}).then(function(e){(e.status=200)&&getProjects(t,!1)},function(t){})},getTasks=function(s,a,i,c,n){var r="https://api-test-task.decodeapps.io/tasks?session="+s+"&project_id="+a+"&paging_size="+i+"&paging_offset="+c;null!=n&&(r=r+"&condition_keywords="+n),e({method:"GET",url:r}).then(function(e){t.taskPageCount=Math.ceil(e.data.total_count/10),t.tasks=[],t.tasksCount=e.data.tasks.length,void 0!=t.tasksCount&&angular.forEach(e.data.tasks,function(e,s){var a,i=o("date")(t.currentDate,"EEEE '('MM.dd.yyyy')'","+0900"),c=o("date")(new Date(e.Task.created_at),"EEEE '('MM.dd.yyyy')'",t.currentTimeZone),n=new Date(t.currentDate.getTime()-864e5),r=o("date")(n,"EEEE '('MM.dd.yyyy')'","+0900");a=i==c?"Today":r==c?"Yesterday":c;var d={Task:{id:e.Task.id,title:e.Task.title,description:e.Task.description,created_at:a}};t.tasks.push(d)}),t.preloader={display:"none"}},function(t){})},compliteTask=function(s,o){e({method:"POST",url:"https://api-test-task.decodeapps.io/tasks/task/complite",data:{session:s,Task:{id:o}}}).then(function(e){(e.status=200)&&(getTasks(s,t.activeProject,10,0,null),getProjects(s,!0))},function(t){})},createTask=function(s,o,a,i){e({method:"POST",url:"https://api-test-task.decodeapps.io/tasks/task",data:{session:s,Project:{id:o},Task:{title:a,description:i}}}).then(function(e){if(e.status=201){var s={Task:{id:e.data.Task.id,title:a,description:i,created_at:"Today"}};t.tasks.push(s),t.tasksCount=t.tasks.length,angular.forEach(t.projects,function(e,s){e.Project.id==t.activeProject&&e.Project.task_count++})}},function(t){})},editThisTask=function(s,o,a,i){e({method:"POST",url:"https://api-test-task.decodeapps.io/tasks/task",data:{session:s,Task:{id:o,title:a,description:i}}}).then(function(e){(e.status=200)&&(t.taskId=o,t.taskName=a,t.taskDescription=i,t.showTaskBlock=!0,t.showBlockTask=!1,angular.forEach(t.tasks,function(t,e){t.Task.id==o&&(t.Task.title=a)}))},function(t){})},deleteThisTask=function(s,o){e({method:"DELETE",url:"https://api-test-task.decodeapps.io/tasks/task?session="+s+"&task_id="+o}).then(function(e){(e.status=200)&&(t.closePageTask(),getProjects(s,!0))},function(t){})},t.search=function(){null!=t.searchKeyword&&getTasks(i,t.activeProject,10,0,t.searchKeyword)},t.addProject=function(){createProject(i,t.projectEdit)},t.updateProject=function(){editProject(i,t.activeProject,t.projectEdit)},t.deleteProject=function(){deleteThisProject(i,t.activeProject)},t.openTask=function(e,s,o){t.showTaskBlock=!0,t.bgStyle={opacity:"0.8"},t.taskId=e,t.taskName=s,t.taskDescription=o},t.editTask=function(e,s,o){t.isTaskEdit=!0,t.taskIdEdit=e,t.taskNameAdd=s,t.taskDescriptionAdd=o,t.showTaskBlock=!1,t.showBlockTask=!0,t.bgStyle={opacity:"0.8"}},t.UpdateTask=function(){editThisTask(i,t.taskIdEdit,t.taskNameAdd,t.taskDescriptionAdd)},t.compliteTask=function(t){compliteTask(i,t)},t.deleteTask=function(t){deleteThisTask(i,t)},t.openTasks=function(e,o){var a=s.get("session");t.activeProject=e,t.projectTitle=o,getTasks(a,t.activeProject,10,0,null)},t.addTask=function(){createTask(i,t.activeProject,t.taskNameAdd,t.taskDescriptionAdd)},t.openProjectPage=function(){t.isProjectEdit=!1,t.showBlockEditProjects=!0,t.bgStyle={opacity:"0.8"}},t.closeProjectPage=function(){t.showBlockProjects=!1,t.bgStyle={opacity:"1"}},t.getProjectPageTitle=function(){return t.isProjectEdit?"Edit project":"Create project"},t.openEditProjectPage=function(){t.isProjectEdit=!0,t.projectEdit=t.projectTitle,t.showBlockEditProjects=!0,t.bgStyle={opacity:"0.8"}},t.closeEditProjectPage=function(){t.showBlockEditProjects=!1,t.bgStyle={opacity:"1"}},t.openTaskPage=function(){t.isTaskEdit=!1,t.showBlockTask=!0,t.bgStyle={opacity:"0.8"}},t.closeTaskPage=function(){t.showBlockTask=!1,t.bgStyle={opacity:"1"}},t.closePageTask=function(){t.showTaskBlock=!1,t.bgStyle={opacity:"1"}},t.nextPage=function(){if(!t.busy&&void 0!=t.activeProject){var s=t.page;if(!(s+1>t.taskPageCount)){t.busy=!0,t.page++;var a=10*(t.page-1),c="https://api-test-task.decodeapps.io/tasks?session="+i+"&project_id="+t.activeProject+"&paging_size=10&paging_offset="+a;e({method:"GET",url:c}).then(function(e){e.data.tasks.length>0&&angular.forEach(e.data.tasks,function(e,s){var a,i=o("date")(t.currentDate,"EEEE '('MM.dd.yyyy')'","+0900"),c=o("date")(new Date(e.Task.created_at),"EEEE '('MM.dd.yyyy')'",t.currentTimeZone),n=new Date(t.currentDate.getTime()-864e5),r=o("date")(n,"EEEE '('MM.dd.yyyy')'","+0900");a=i==c?"Today":r==c?"Yesterday":c;var d={Task:{id:e.Task.id,title:e.Task.title,description:e.Task.description,created_at:a}};t.tasks.push(d)}),t.busy=!1},function(t){})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
